source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/plug.kak" noload
plug "kak-lsp/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{
    # set-option global lsp_cmd "/home/gskw/.config/kak/plugins/kak-lsp/target/debug/kak-lsp -s %val{session}"
    hook global WinSetOption filetype=(rust|go|scala) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        set-option window lsp_hover_max_lines 10
        map window user h ':lsp-hover<ret>' -docstring 'LSP Hover'

        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        hook -once -always window WinSetOption filetype=.* %{
          remove-hooks window semantic-tokens
        }

        lsp-enable-window
    }

	set global lsp_diagnostic_line_info_sign 'üõà'
	set global lsp_diagnostic_line_hint_sign '‚Äº'
    set global lsp_diagnostic_line_error_sign '‚®Ø'
    set global lsp_diagnostic_line_warning_sign 'ÔõÅ'
    set global lsp_auto_show_code_actions 'true'

    map global user d ':lsp-diagnostics<ret>' -docstring 'Diagnostics'
    map global user l ':enter-user-mode lsp<ret>' -docstring 'LSP Mode'
    set-face global DiagnosticWarning ,,rgb:b08800+bc
    set-face global DiagnosticError ,,rgb:cb2431+bc
    lsp-auto-hover-insert-mode-enable
}

plug "Gskartwii/droplet.kak" theme
plug "TeddyDD/kakoune-selenized" theme
plug "evanrelf/primer.kak" theme
plug "caksoylar/kakoune-snow" theme
plug "nesyamun/nord-kakoune" theme
plug "vbauerster/second-light" theme
plug "raiguard/one.kak" theme
plug 'delapouite/kakoune-buffers' %{
    map global user b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global user B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

colorscheme one-light
one-enable-fancy-underlines
set-face global Default default # allow background image to show up
set-face global BufferPadding default
set-face global StatusLine default
set-face global StatusLineInfo default
set-face global StatusLineMode rgb:0366d6,default
set-face global StatusLineValue rgb:ea4aaa,default

define-command -hidden -params 3 set-blended-color %{
    set-face global %arg{1} "default,rgb:%sh{$HOME/.config/kak/blend-alpha.py $kak_opt_bg $2 $3}"
}

set-blended-color PrimarySelection %opt{blue} %opt{selectionalpha}
set-blended-color SecondarySelection %opt{green} %opt{selectionalpha}
set-blended-color PrimaryCursor %opt{blue} %opt{cursoralpha}
set-blended-color SecondaryCursor %opt{green} %opt{cursoralpha}
set-blended-color PrimaryCursorEol %opt{lightred} %opt{cursoralpha}
set-blended-color SecondaryCursorEol %opt{darkorange} %opt{cursoralpha}

plug "danr/kakoune-easymotion" config %{
	map global user e ':enter-user-mode easymotion<ret>' -docstring 'Easymotion'
}

plug "andreyorst/fzf.kak" config %{
    map global normal <c-p> ': fzf-mode<ret>'
    map global user , ': fzf-mode<ret>v' -docstring 'FZF Git'

} defer "fzf_vcs" %{
	set-option global fzf_git_command 'git ls-files --cached --others --modified --exclude-standard'
}

plug "jbomanson/search-doc.kak" defer search-doc %{} demand

plug "andreyorst/smarttab.kak" config %{
    hook global WinSetOption filetype=rust expandtab
    hook global WinSetOption filetype=scala expandtab
    hook global WinSetOption filetype=go noexpandtab
    hook global WinSetOption filetype=c expandtab
    hook global WinSetOption filetype=json expandtab
}

plug "KJ_Duncan/kakoune-plantuml.kak" domain "bitbucket.org"

set-option global tabstop 4
set-option global indentwidth 4
set-option global modelinefmt "ÓÇ≥ %%val{bufname}{StatusLineValue}:%%val{cursor_line}:%%val{cursor_char_column}{StatusLine} %%sh{expr $kak_cursor_line \* 100 / $kak_buf_line_count}%%%% ÓÇ≥ {{mode_info}} ÓÇ≥ %%opt{lsp_modeline_code_actions}%%opt{lsp_modeline_progress} ÓÇ≥ {StatusLineValue}%%val{client}@%%val{session}{StatusLine}"
set-option global ui_options terminal_set_title=false terminal_enable_mouse=false terminal_assistant=none terminal_padding_char=‚ãØ
set-option global startup_info_version 20211108
set-option global grepcmd 'rg -Hn --no-heading'

hook global WinCreate .* %{
    evaluate-commands %sh{
        echo "set-option -add window ui_options terminal_set_title=$kak_bufname:::Kakoune"
    }
}

hook global WinSetOption bufname=.* %{
    evaluate-commands %sh{
        echo "set-option -add window ui_options terminal_set_title=$kak_bufname:::Kakoune"
    }
}

hook global ModuleLoaded kitty %{
    set-option global kitty_window_type os-window
}

hook global WinSetOption filetype=markdown %{
    set-option window autowrap_column 80
    autowrap-enable
}

map global user q ':db<ret>' -docstring 'Close buffer'
unmap global normal *
map global normal * <a-)>

hook global WinSetOption filetype=rust %{
    set-option window formatcmd 'rustfmt'
    set-option window tabstop 4
    set-option window indentwidth 4
}
hook global WinSetOption filetype=go %{
    set-option window formatcmd 'gofmt'
    set-option window tabstop 4
    set-option window indentwidth 4
}
hook global WinSetOption filetype=scala %{
    set-option window tabstop 2
    set-option window indentwidth 2

    add-highlighter -override shared/scala/string region %{(?<!')"} %{(?<!\\)(\\\\)*"} fill string
}
hook global WinSetOption filetype=c %{
    set-option window tabstop 4
    set-option window indentwidth 4
}
hook global WinSetOption filetype=latex %{
    map window insert <a-a> '√§'
    map window insert <a-o> '√∂'

    add-highlighter window/ wrap -word -indent
}

hook global WinSetOption filetype=json %{
    set-option window tabstop 4
    set-option window indentwidth 4
}

hook global BufCreate .*waybar/config %{
    set buffer filetype json
}

hook global KakBegin .* %{
    evaluate-commands %sh{
        randword=$(shuf -e -n1 chess backgammon checkers hearts solitaire freecell pinball spades minesweeper)
        while [ -f /run/user/$UID/kakoune/$randword ]; do
            randword=$(shuf -e -n1 chess backgammon checkers hearts solitaire freecell pinball spades minesweeper)
        done

        case $kak_session in
            *[!0-9]*) ;;
            *) echo "rename-session $randword" ;;
        esac
    }
}

hook global ClientCreate .* %{
    evaluate-commands %sh{
        randname=$(shuf -e -n1 red green blue yellow maroon magenta black white brown purple orange)
        while [[ $kak_client_list == *$randname* ]]; do
            randname=$(shuf -e -n1 red green blue yellow maroon magenta black white brown purple orange)
        done

        case $kak_session in
            client[0-9]*) ;;
            *) echo "rename-client $randname" ;;
        esac
    }
}

define-command -hidden wl-clipboard-copy %{
    nop %sh{
        printf "%s\n" "$kak_selection" | wl-copy &> /dev/null
    }
}

define-command -params 1 -hidden wl-clipboard-get %{
    echo -debug "exec %arg{1}"
    evaluate-commands -save-regs W %{
        set-register W "%sh{wl-paste}"
        execute-keys """W%arg{1}"
    }
}

declare-user-mode wl-clipboard
map global wl-clipboard y ':wl-clipboard-copy<ret>' -docstring 'Yank'
map global wl-clipboard p ':wl-clipboard-get p<ret>' -docstring 'Paste after'
map global wl-clipboard P ':wl-clipboard-get P<ret>' -docstring 'Paste before'
map global wl-clipboard R ':wl-clipboard-get R<ret>' -docstring 'Replace'
map global wl-clipboard <a-p> ':wl-clipboard-get "<lt>a-p>"<ret>' -docstring 'Paste after+sel'
map global wl-clipboard <a-P> ':wl-clipboard-get "<lt>a-P>"<ret>' -docstring 'Paster before+sel'
map global normal <c-w> ':enter-user-mode wl-clipboard<ret>'

evaluate-commands %sh{
    if [ $TERM = "xterm-kitty" ]; then
        echo nop
    else
        echo "colorscheme base16"
    fi
}

# Thank you so much @cipharius
provide-module luau %{
    define-command luau-hover-instructions %{
        info -style below \
            -anchor "%val{cursor_line}.%val{cursor_char_column}" \
            %sh{luau --compile "$kak_buffile" | sed -ne "/^\s\+$kak_cursor_line:/,/^\(\s\+\|$\)/{//!p;}"}
    }

    hook global WinSetOption filetype=lua %{
        map -docstring "Show current line instructions" \
            window user i ": luau-hover-instructions<ret>"
        map -docstring "Keep hover instructions" window user I %{
            :hook -group luau-hover window NormalIdle .* luau-hover-instructions
        }
        map -docstring "Hide hover instructions" window user <a-i> %{
            :remove-hooks window luau-hover
        }
    }
}

require-module luau
